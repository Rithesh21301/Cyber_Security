XYZ Company
Penetration Testing Report
Target: testphp.vulnweb.com
Tester: RITHESH
Gmail: rithesh21301@gmail.com

This report provides an overview of the penetration testing conducted on “testphp.vulnweb.com”.
The assessment aimed to identify potential security vulnerabilities in the web application, leveraging various ethical hacking methodologies.
Identified vulnerabilities are categorized based on their severity, along with recommended mitigations.

Scope:
  Target URL: testphp.vulnweb.com
  Testing Type: Black-box penetration testing
  Authorization: Permission granted by XYZ Company
  Objective: Identify security flaws such as SQL injection, Cross-Site Scripting (XSS), authentication issues, and misconfigurations.

Penetration Testing Report
Target: testphp.vulnweb.com
1. Reconnaissance
    1.1 WhatWeb Scan
      Command: whatweb testphp.vulnweb.com
      Findings:
      Web Server: nginx/1.19.0
      PHP Version: 5.6.40-38 (outdated, potential vulnerabilities)
      ActiveX and Adobe Flash detected (legacy technologies, potential security risks)
      Email Identified: wvs@acunetix.com
      X-Powered-By Header: PHP/5.6.40-38 (reveals technology stack, useful for fingerprinting)

      Using the nmap command: nmap -sV -A testphp.vulnweb.com
      PORT             STATE          SERVICE            VERSION
      80/tcp           open            http             nginx 1.19.0
      113/tcp          closed          ident
      2000/tcp         open            cisco-sccp?
      5060/tcp         open            sip?

2. Web Vulnerability Analysis
    For port 80
      2.1 HTTP Header Issues
        Findings:
        Missing X-Frame-Options header (Clickjacking vulnerability)
        Missing X-Content-Type-Options: nosniff header (MIME-type sniffing attack possible)
  
        Mitigation:
        Set X-Frame-Options: DENY to prevent clickjacking.
        Set X-Content-Type-Options: nosniff to prevent MIME-type sniffing attacks.
  
      2.2 Client-Side Policy Issues
        Findings:
        /clientaccesspolicy.xml and /crossdomain.xml contain wildcard entries (*), allowing unrestricted access.
        Exploitation Steps:
            Check policy files:
            curl -s http://testphp.vulnweb.com/clientaccesspolicy.xml
            curl -s http://testphp.vulnweb.com/crossdomain.xml
            It allow-access-from domain="*" is present, it allows cross-domain attacks.
        Can be exploited using CSRF, Flash-based attacks, or XXE injection.
  
        Mitigation:
            Restrict access in these policy files to trusted domains only.
  
3. Network and Service Scanning

      3.1 Port 2000 (Cisco SCCP Service)
      Command: nmap -p 2000 -sV -A testphp.vulnweb.com

      Findings:
      Port 2000 open, identified as Cisco SCCP (Skinny Client Control Protocol)
      Potential risks include unauthorized call interception or service manipulation.
        
      Exploitation Attempts:
        Check for response using Netcat:
        nc -v testphp.vulnweb.com 2000
        Send crafted SCCP request:
        printf "\x01\x00\x00\x00\x00\x00\x00\x00" | nc -v testphp.vulnweb.com 2000
          
        Mitigation:
        Disable SCCP if not needed.
        Restrict access to trusted IPs.

      3.2 Port 5060 (SIP Service)
        Command: nmap -p 5060 -sV -A testphp.vulnweb.com
        nmap : Calls the Nmap network scanner
        -p 5060: Specifies the port 5060 (commonly used for SIP-based VoIP services).
        If this port is open, the server may be running a VoIP service that could be vulnerable to attacks like SIP enumeration, brute force, and call hijacking.

        -sV (Service Version Detection)
        Identifies the exact service running on port 5060
        -A (Aggressive Scan)

Findings:
        Port 5060 open, indicating a SIP (VoIP) service.
        Potential risks: SIP enumeration, brute-force authentication attacks, call interception.
        Exploitation Attempts:
        Send SIP OPTIONS request:
        printf "OPTIONS sip:testphp.vulnweb.com SIP/2.0\r\nVia: SIP/2.0/UDP your_ip:5060;rport;branch=z9hG4bK-random\r\nMax-Forwards: 70\r\nFrom: <sip:attacker@test.com>\r\nTo: <sip:testphp.vulnweb.com>\r\nCall-ID: $(cat /proc/sys/kernel/random/uuid)\r\nCSeq: 1 OPTIONS\r\nContact: <sip:your_ip:5060>\r\nContent-Length: 0\r\n\r\n" | nc -u -v testphp.vulnweb.com 5060
        If a response is received, the SIP service is active and can be further tested for authentication bypass or enumeration.
        
      Mitigation:
        Disable SIP if not needed.
        Use strong authentication mechanisms.
        Implement rate limiting and intrusion detection.
4. Recommendations
    Key Findings:
        Outdated PHP version detected.
        Web application missing critical security headers.
        Open SIP and SCCP services with potential vulnerabilities.
        Weak cross-domain policy configuration.
          
        Recommendations:
          
          Web Security:
              Update PHP to a supported version.
              Implement proper security headers (CSP, X-Frame-Options, X-Content-Type-Options, etc.).
              Restrict cross-domain policies to trusted domains only.
          
          Network Security:
              Restrict access to ports 2000 (SCCP) and 5060 (SIP) to trusted IPs.
              Disable unnecessary services.
          
          SIP/SCCP Hardening:
              Use authentication and encryption for VoIP services.
              Monitor and log VoIP traffic for anomalies.
                
General:
    Regular security audits and penetration testing.
    Implement an intrusion detection system (IDS) to monitor network activity.
                
Final Conclusion:
      In port 80
               there is  
                    1) Outdated PHP Version (5.6.40)
                    2) Missing Security Headers
                    3) Exposed Server Information
                    4) Cross-Domain Policy Issues
                    5) Potential SQL Injection
                    6) Possible Cross-Site Scripting (XSS)




